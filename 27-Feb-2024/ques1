class TreeNode {
    int val;
    TreeNode left, right;

    TreeNode(int x) {
        val = x;
        left = right = null;
    }
}

public class BSTNodeFixer {

    TreeNode first, middle, last, prev;

    // Method to recover the BST by fixing two swapped nodes
    public void recoverTree(TreeNode root) {
        // Initialize variables to track swapped nodes
        first = middle = last = prev = null;

        // Perform inorder traversal to find the swapped nodes
        inorder(root);

        // Swap the values of the two nodes
        if (first != null && last != null) {
            swapValues(first, last);
        } else if (first != null && middle != null) {
            swapValues(first, middle);
        }
    }

    // Inorder traversal to find swapped nodes
    private void inorder(TreeNode root) {
        if (root == null) return;

        inorder(root.left);

        // Check for swapped nodes
        if (prev != null && root.val < prev.val) {
            if (first == null) {
                first = prev;
                middle = root;
            } else {
                last = root;
            }
        }
        prev = root;

        inorder(root.right);
    }

    // Method to swap values of two nodes
    private void swapValues(TreeNode node1, TreeNode node2) {
        int temp = node1.val;
        node1.val = node2.val;
        node2.val = temp;
    }

    // Main method to test the BST node fixer
    public static void main(String[] args) {
        // Construct the BST
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(3);
        root.right = new TreeNode(2);

        // Print the original BST
        System.out.println("Original BST:");
        printInorder(root);
        System.out.println();

        // Fix the BST
        BSTNodeFixer solution = new BSTNodeFixer();
        solution.recoverTree(root);

        // Print the fixed BST
        System.out.println("Fixed BST:");
        printInorder(root);
    }

    // Helper method to print the inorder traversal of the BST
    private static void printInorder(TreeNode root) {
        if (root == null) return;

        printInorder(root.left);
        System.out.print(root.val + " ");
        printInorder(root.right);
    }
}
